<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<TITLE>80386 Programmer's Reference Manual -- Opcode STOS</TITLE>
</HEAD>
<BODY STYLE="width:80ch">
<B>up:</B> <A HREF="c17.htm">
Chapter 17 -- 80386 Instruction Set</A><BR>
<B>prev:</B><A HREF="STI.htm"> STI Set Interrupt Flag</A><BR>
<B>next:</B><A HREF="STR.htm"> STR Store Task Register</A>
<P>
<HR>
<P>
<H1>STOS/STOSB/STOSW/STOSD -- Store String Data</H1>

<PRE>
Opcode  Instruction  Clocks   Description

AA      STOS m8      4        Store AL in byte ES:[(E)DI], update (E)DI
AB      STOS m16     4        Store AX in word ES:[(E)DI], update (E)DI
AB      STOS m32     4        Store EAX in dword ES:[(E)DI], update (E)DI
AA      STOSB        4        Store AL in byte ES:[(E)DI], update (E)DI
AB      STOSW        4        Store AX in word ES:[(E)DI], update (E)DI
AB      STOSD        4        Store EAX in dword ES:[(E)DI], update (E)DI
</PRE>


<H2>Operation</H2>

<PRE>
IF AddressSize = 16
THEN use ES:DI for DestReg
ELSE (* AddressSize = 32 *) use ES:EDI for DestReg;
FI;
IF byte type of instruction
THEN
   (ES:DestReg) := AL;
   IF DF = 0
   THEN DestReg := DestReg + 1;
   ELSE DestReg := DestReg - 1;
   FI;
ELSE IF OperandSize = 16
   THEN
      (ES:DestReg) := AX;
      IF DF = 0
      THEN DestReg := DestReg + 2;
      ELSE DestReg := DestReg - 2;
      FI;
   ELSE (* OperandSize = 32 *)
      (ES:DestReg) := EAX;
      IF DF = 0
      THEN DestReg := DestReg + 4;
      ELSE DestReg := DestReg - 4;
      FI;
   FI;
FI;
</PRE>

<H2>Description</H2>

STOS transfers the contents of all AL, AX, or EAX register to the memory
byte or word given by the destination register relative to the ES segment.
The destination register is DI for an address-size attribute of 16 bits or
EDI for an address-size attribute of 32 bits.
<P>
The destination operand must be addressable from the ES register. A segment
override is not possible.
<P>
The address of the destination is determined by the contents of the
destination register, not by the explicit operand of STOS. This operand is
used only to validate ES segment addressability and to determine the data
type. Load the correct index value into the destination register before
executing STOS.
<P>
After the transfer is made, DI is automatically updated. If the direction
flag is 0 
(<A HREF="CLD.htm">CLD</A> was executed), DI is incremented; 
if the direction flag is
1 
(<A HREF="STD.htm">STD</A> was executed), 
DI is decremented. DI is incremented or decremented by
1 if a byte is stored, by 2 if a word is stored, or by 4 if a doubleword is
stored.
<P>
STOSB, STOSW, and STOSD are synonyms for the byte, word, and doubleword STOS
instructions, that do not require an operand. They are simpler to use, but
provide no type or segment checking.
<P>
STOS can be preceded by the 
<A HREF="REP.htm">REP</A> prefix for a block fill of CX or ECX bytes,
words, or doublewords. Refer to the 
<A HREF="REP.htm">REP</A> instruction for further details.

<H2>Flags Affected</H2>

None

<H2>Protected Mode Exceptions</H2>

#GP(0) if the result is in a nonwritable segment; #GP(0) for an illegal
memory operand effective address in the CS, DS, ES, FS, or GS segments;
#SS(0) for an illegal address in the SS segment; #PF(fault-code) for a page
fault

<H2>Real Address Mode Exceptions</H2>

Interrupt 13 if any part of the operand would lie outside of the effective
address space from 0 to 0FFFFH

<H2>Virtual 8086 Mode Exceptions</H2>

Same exceptions as in Real Address Mode; #PF(fault-code) for a page fault


<P>
<HR>
<P>
<B>up:</B> <A HREF="c17.htm">
Chapter 17 -- 80386 Instruction Set</A><BR>
<B>prev:</B><A HREF="STI.htm"> STI Set Interrupt Flag</A><BR>
<B>next:</B><A HREF="STR.htm"> STR Store Task Register</A>
</BODY>
